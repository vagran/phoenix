====== Phoenix data model ======

Phoenix is fully object-oriented OS. All system entities are objects. System manages these objects, provides class factories, routes objects methods invocations to corresponding object implementation code. The Phoenix OS also implements principles of orthogonal persistence. All objects which are used by someone persist in the system as long or as short as they are required.

There are two fundamental system entities -- **containers** and **threads**. There are no conventional processes.

Since Phoenix is object oriented OS the system should have some way to manage objects system-widely -- create them, protect their data from each other, dynamically register new classes, etc. Each system-wide class has its own GUID (more precisely two GUIDs -- one for implemented functionality (e.g. ELF run-time linker), and another one for particular implementation (e.g. version 1.3 by John Smith)). Class implementation is encapsulated in a container -- initially it is an executable image, either static or dynamic, which contains class implementation code and initialized data. It is inactive container -- package. When a package is activated the executable image is loaded to the memory, linked against shared libraries and separate thread ("construction thread") launched for calling all global objects constructors. After a construction thread is terminated the container can be invoked -- class instance can be created or methods of any created objects can be invoked. Since all objects can be available globally some special protection mechanism should be introduced in order to prevent direct access to an object data from other executables. In phoenix this feature is implemented by switching address spaces when calls are done between containers -- each system-wide object method invocation leads to system call. The kernel checks that calling thread has access to a specified object and its method and switches address space to the container where the method is implemented, i.e. containers switching occurs. This ensures that each class implementation has access only to its own data.

Thread is just an execution context. An address space is associated with a container, not a thread. However a stack is a thread attribute so the stack is preserved when switching to some container. Stack is always private for a thread. So threads could continuously migrate between containers. When some container is invoked it becomes current for the calling thread. At any time only one container can be current for some thread. The kernel tracks containers invocation backtrace (calling stack) in order to keep reference counting. Kernel also maintains list of objects referenced by a thread. When a container is not longer referenced (not in backtrace of any thread and no objects created by it currently exist) it is deactivated -- destruction thread is launched and an executable image is unmapped when it terminates.

Thread state is stored in a TCB (Thread Control Block). TCB contains a thread saved context among with other meta-information. In case the thread is blocked, the TCB contains wait channel ID and continuation entry point with arguments. TCBs are managed by the Threads Manager and are synchronized with the kernel.

When container is activated the kernel provides an instance of system object to the construction thread. Methods of this object can be used to invoke kernel services -- similarly to system calls of conventional operating systems. System method invocation processing is very similar to calling system-wide object method -- the difference is that no container is activated -- class implementation is located in the kernel.

The executable image has a single entry point -- the one which address is specified in the image header. It is invoked with several arguments, one of them is the invocation reason. Possible reasons are:
  * Container construction.
  * Container destruction. Both construction and destruction reasons are handled by startup library which calls global constructors and destructors, performs run-time linking against shared libraries.
  * System notification, for example, about interrupt for which this container/thread is registered or about system event such as restart. The entry point for notifications can be overwritten to another entry address.
  * Default entry point -- if the container constructor requests to launch a thread in this container and does not provide entry address, new thread is launched from this entry point.

When a thread wants to receive notification from the system it must register for required event. It should specify container and entry point address for notification handler. When the event is fired the kernel saves all registers on a thread stack, put as return address a place where the thread was interrupted, switches to another container if required and invokes registered entry point. If container switch occurs return address points to the same code which is used for returns from inter-containers calls. Before returning the thread should restore all saved registers from the stack in proper sequence (library stub should be provided for that).

All containers and threads are subjects for system persistence. All containers data and thread contexts are preserved on non-volatile storage between system reboots.

Containers can have shared memory mappings -- memory region of some container can be mapped to any other container.

When invoking containers data can be passed in the stack (arguments can point to local stack-allocated variables). There is also an alternative way -- when passing data during container invocation (and getting back result) separate shared memory pages are used. For convenience a special allocator object can be used:
<code c>
if (someCondition) {
    ContainerFrame frame;
    CFString str(frame);
    CFVector vec(frame);
    
    someObj->SomeMethod(str, vec);
}
</code>
It can be used as allocator for standard classes. When it allocates memory it specifies "shared" attribute which means that the pages used for the allocated memory will be accessible for invoked container. If the invoked container will modify passed objects they will allocate memory using the same allocator instance so the new memory will be visible when in the calling container. All the memory will be released when ContainerFrame object is destroyed. Since its life-time is usually short and memory is allocated consequentially the simplest implementation should be used for the allocator, e.g. simple pointer advancing.

Containers can be marked as resident (special privilege required) in order to make it memory-resident -- it will not be swapped out due to inactivity. This can be used, for example, by devices drivers.

Containers and threads can be marked as bootstrap. In such case all the memory used for TCBs and containers content is allocated from special dedicated bootstrap region of virtual memory which is never used by normal containers and threads. This is used to avoid address conflicts during the system bootstrapping.

====== Containers and shared libraries ======

Containers are used when implementing global system classes (e.g. fonts, applications). Shared libraries can be used for some common classes used by most of containers implementations (e.g. strings, vectors, lists, trees). Code of shared libraries stored on the same physical pages which are mapped to many containers. Run-time linking is performed by run-time linker -- separate user-space class located in separate container. The kernel is not aware of shared libraries. It looks for corresponding record in
executable image (PT_INTERP for ELF format) and invokes container of associated interpreter (the record should contain corresponding GUID) which maps and relocates shared libraries images.

====== Threads Manager (TM) ======

Threads manager is responsible for maintaining TCBs, idle threads creation, threads scheduling and synchronizing TCBs with the kernel.

The kernel has a limited working set of TCBs which are TCBs of currently active threads. The TM periodically downloads used TCBs (pulls) and uploads new TCBs (pushes) to the kernel. TM uses periodic timer interrupts for switching TCBs in the kernel by a special system call. When TCBs are pushed by TM to the kernel, the TM specifies default TCBs switching order. The kernel uses this order to select next thread when the active thread is deactivated in the kernel (by waiting call). The TM should specify idle thread to be last in the list of TCBs in the kernel. The idle thread is implemented in the TM container. When the kernel switches to the idle thread, it checks if there are some more active threads to run in this round, and uploads their TCBs to the kernel if found. If no more threads left for this round, it starts the next one. All running threads are again pushed to the kernel. If the are no running threads left, the idle thread executes idle actions -- both in user space and in the kernel (e.g. zeroing physical pages in the pool, power management). If all idle actions finished it halts the processor by a corresponding system call.

====== Components manager (CM) ======

Components manager is a class (in a separate container) which stores all executable images and other resources in its address space. Components are organized in packages -- set of blobs -- binary data, analog of files in a conventional OS, they can be executable images or any other resources represented as bytes stream. CM can be invoked in order to install new package, find which package contains some class or interface implementation, find shared library etc. CM represents every blob in its memory so that corresponding region of its container can be mapped to other container space, for example, in order to map some section of executable image. When a package is uninstalled the CM releases its reference to it so the package will still be present in the system until the last reference will be released by the code which still uses it.

====== Objects manager (OM) ======

This component stores information about threads, containers and objects:
  * Database of all threads, containers and threads permissions for access to containers, objects and methods in these objects. 
  * References between objects. Object is living until last reference to it is released.

B-trees are used for indexing the information. Using B-trees allows to optimize paging.

Objects are owned by a container. Each exported object keeps reference to its container. Component manager holds one reference to each installed container. When some container is uninstalled the components manager releases its reference to the container but it is not actually destroyed until there is at least one exported object. When last exported object is destroyed, it releases the last reference to the container and the container is destroyed. When some thread creates an object, it belongs to the container which is current for the thread. If some fault occurs in the thread an exception is thrown. Exception handlers chain is traversed in all containers in the thread calling chain. The handlers can release their references to used objects.

The object manager keeps containers calling chain (containers backtrace or containers calling stack) for each thread.

The object manager marks memory used for storing meta information for resident threads and containers as resident.

Garbage collector is implemented in OM.

====== Memory manager (MM) ======

Memory manager is responsible for memory allocations in global address space. It keeps all meta-information required for the allocator.

Resident memory allocations use separate dedicated resident address range.

The memory manager also handles user-space page faults and invokes pagers if required.
